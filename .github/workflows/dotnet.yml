# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    # Service containers to run with `runner-job`
    # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 43594 on service container to the host
          - 43594:43594
          
    steps:
    - uses: actions/checkout@v3
    # Performs a clean installation of all dependencies in the `package.json` file
    # For more information, see https://docs.npmjs.com/cli/ci.html
    - name: Install dependencies
      run: npm ci
    - name: Connect to PostgreSQL
      # Runs a script that creates a PostgreSQL table, populates
      # the table with data, and then retrieves the data
      run: node client.js
      # Environment variables used by the `client.js` script to create
      # a new PostgreSQL table.
      env:
        # The hostname used to communicate with the PostgreSQL service container
        POSTGRES_HOST: localhost
        # The default PostgreSQL port
        POSTGRES_PORT: 43594
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test Login to Postgres
      run: |
        #sudo /etc/init.d/postgresql restart
        export PGHOSTADDR=localhost
        echo $PGHOSTADDR
        export PGPORT=43594
        echo $PGPORT
        export PGHOST=43594
        echo $PGHOST
        export PGUSER=postgres
        echo $PGUSER
        export PGPASSWORD=postgres
        echo $PGPASSWORD
        psql -l
        /c testdb
        /dt
        /quit
    - name: Test
      run: dotnet test --no-build --verbosity normal
