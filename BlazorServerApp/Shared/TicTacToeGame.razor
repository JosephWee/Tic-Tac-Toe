@using Microsoft.AspNetCore.Mvc
@using TicTacToe.Models
@using BlazorServerApp.Data
@inject TicTacToeService tictactoesvc

<div>@gameheader</div>
<div id="@InstanceId" class="game">
    @for (int r = 0; r < @GridSize; r++)
    {
        <div class="gamerow">
            @for (int c = 0; c < GridSize; c++)
            {
                int i = r * GridSize + c;
                
                List<string> cssClasses = new List<string>() { "gamecell" };
                
                if (r == 0)
                    cssClasses.Add("firstrow");
                else if (r == GridSize -1)
                    cssClasses.Add("lastrow");
                else
                    cssClasses.Add("midrow");

                if (c == 0)
                    cssClasses.Add("firstcol");
                else if (c == GridSize - 1)
                    cssClasses.Add("lastcol");
                else
                    cssClasses.Add("midcol");

                int CellState = CellStates[i];

                string imgUrl = "/Tic-Tac-Toe/Blank120x120.png";
                string symbolColor = WinningCells.Contains(i) ? "Red" : string.Empty;
                
                if (CellState == 1)
                    imgUrl = $"/Tic-Tac-Toe/Cross{symbolColor}120x120.png";
                else if (CellState == 2)
                    imgUrl = $"/Tic-Tac-Toe/Circle{symbolColor}120x120.png";

                List<string> contentCssClasses = new List<string>() { "gamecellcontent" };

                <div id="cell@(i)" class="@(string.Join(" ", cssClasses))">
                    <img class="@(string.Join(" ", contentCssClasses))" src="@imgUrl" @onclick="e => imgOnClick(e, i)" />
                </div>
            }
        </div>
    }
</div>
<div>@gamefooter</div>
<br/>
@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string InstanceId { get; set; }

    [Parameter]
    public int GridSize { get; set; }

    protected bool? debugMode = null;
    [Parameter]
    public bool? Debug
    {
        get
        {
            return debugMode;
        }
        set
        {
            debugMode = value;
        }
    }

    protected string gameheader = string.Empty;
    protected string gamefooter = string.Empty;
    private List<int> CellStates = new List<int>();
    private List<int> WinningCells = new List<int>();

    protected override void OnParametersSet()
    {
        gameheader = $"{(debugMode == true ? InstanceId : string.Empty)}";

        int arraySize = GridSize * GridSize;
        var array = new int[arraySize];
        CellStates.AddRange(array);

        base.OnParametersSet();
    }

    public void imgOnClick(MouseEventArgs e, int cellIndex)
    {
        var CellState = CellStates[cellIndex];
        if (CellState == 0)
        {
            var cellstates = CellStates.ToList();
            cellstates[cellIndex] = 1;

            var request = new TicTacToeUpdateRequest()
                {
                    InstanceId = InstanceId,
                    GridSize = GridSize,
                    NumberOfPlayers = 1,
                    CellStates = cellstates
                };
            var response = tictactoesvc.UpdateTicTacToe(request);

            if (response == null)
            {
                gameheader = $"{(debugMode == true ? InstanceId + " " : string.Empty)}An unknown error has occurred";
            }
            else
            {
                if (response.WinningCells != null)
                    WinningCells.AddRange(response.WinningCells);

                if (response.ComputerMove.HasValue && cellstates[response.ComputerMove.Value] == 0)
                {
                    cellstates[response.ComputerMove.Value] = 2;
                }

                CellStates = cellstates.ToList();

                string gameStatus = string.Empty;
                if (response.Status == TicTacToeGameStatus.InProgress)
                    gameStatus = "In Progress";
                else if (response.Status == TicTacToeGameStatus.Player1Wins)
                    gameStatus = "Player 1 Wins";
                else if (response.Status == TicTacToeGameStatus.Player2Wins)
                    gameStatus = "Player 2 Wins";
                else if (response.Status == TicTacToeGameStatus.Draw)
                    gameStatus = "Draw";

                gameheader = $"{(debugMode == true ? InstanceId + " " : string.Empty)}{gameStatus}";
            }

            StateHasChanged();
        }
    }
}
